// Package cocktailsapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package cocktailsapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AccountAccessibilitySettingsModel The accessibility settings for the account
type AccountAccessibilitySettingsModel struct {
	// Theme The accessibility theme
	Theme DisplayThemeModel `json:"theme"`
}

// AccountAddressModel The optional primary address listed with the account
type AccountAddressModel struct {
	// AddressLine1 The primary street address.
	AddressLine1 string `json:"addressLine1"`

	// AddressLine2 The secondary street address building sub divider
	AddressLine2 string `json:"addressLine2"`

	// City The city the address is within
	City string `json:"city"`

	// Country The country
	Country string `json:"country"`

	// PostalCode The postal or zip code
	PostalCode string `json:"postalCode"`

	// Region The state or province
	Region string `json:"region"`

	// SubRegion The state or province divered such as county
	SubRegion string `json:"subRegion"`
}

// AccountCocktailRatingModel The cocktail rating values
type AccountCocktailRatingModel struct {
	// FiveStars The number of five star ratings
	FiveStars int32 `json:"fiveStars"`

	// FourStars The number of four star ratings
	FourStars int32 `json:"fourStars"`

	// OneStars The number of one star ratings
	OneStars int32 `json:"oneStars"`

	// Rating The actual overal rating
	Rating float64 `json:"rating"`

	// RatingCount The total number of ratings given
	RatingCount int32 `json:"ratingCount"`

	// ThreeStars The number of three star ratings
	ThreeStars int32 `json:"threeStars"`

	// TotalStars The total number of stars given
	TotalStars int32 `json:"totalStars"`

	// TwoStars The number of two star ratings
	TwoStars int32 `json:"twoStars"`
}

// AccountCocktailRatingsModel defines model for AccountCocktailRatingsModel.
type AccountCocktailRatingsModel struct {
	// CocktailId The cocktail identifier
	CocktailId string `json:"cocktailId"`

	// Stars The rating for the cocktail (1-5)
	Stars int32 `json:"stars"`
}

// AccountCocktailRatingsRs defines model for AccountCocktailRatingsRs.
type AccountCocktailRatingsRs struct {
	// Ratings The cocktail ratings
	Ratings []AccountCocktailRatingsModel `json:"ratings"`
}

// AccountNotificationSettingsModel The notification settings for the account
type AccountNotificationSettingsModel struct {
	// OnNewCocktailAdditions The notification setting to use when new cocktail addtions are added
	OnNewCocktailAdditions CocktailUpdatedNotificationModel `json:"onNewCocktailAdditions"`
}

// AccountOwnedProfileRs defines model for AccountOwnedProfileRs.
type AccountOwnedProfileRs struct {
	// Accessibility The accessibility settings for the account
	Accessibility AccountAccessibilitySettingsModel `json:"accessibility"`

	// AvatarUri The avatar image uri for the account
	AvatarUri string `json:"avatarUri"`

	// DisplayName The display name for the account visible to other users
	DisplayName string `json:"displayName"`

	// Email The email address for the account
	Email string `json:"email"`

	// FamilyName The family name on the account
	FamilyName string `json:"familyName"`

	// FavoriteCocktails The list of favorite cocktails
	FavoriteCocktails []string `json:"favoriteCocktails"`

	// GivenName The given name on the account
	GivenName string `json:"givenName"`

	// LoginEmail The login email address for the account
	LoginEmail string `json:"loginEmail"`

	// Notifications The notification settings for the account
	Notifications AccountNotificationSettingsModel `json:"notifications"`

	// PrimaryAddress The optional primary address listed with the account
	PrimaryAddress AccountAddressModel `json:"primaryAddress"`

	// SubjectId The federated subject identifier for the account
	SubjectId string `json:"subjectId"`
}

// CocktailDataIncludeModel defines model for CocktailDataIncludeModel.
type CocktailDataIncludeModel = interface{}

// CocktailFavoriteActionModel defines model for CocktailFavoriteActionModel.
type CocktailFavoriteActionModel struct {
	// Action The action to take on the cocktail within the favorites list
	Action CocktailFavoritingActionModel `json:"action"`

	// CocktailId The cocktail identifier
	CocktailId string `json:"cocktailId"`
}

// CocktailFavoritingActionModel The action to take on the cocktail within the favorites list
type CocktailFavoritingActionModel = interface{}

// CocktailImageModel defines model for CocktailImageModel.
type CocktailImageModel struct {
	// Height The height of the image
	Height int32 `json:"height"`

	// Uri The uri of the image
	Uri string `json:"uri"`

	// Width The width of the image
	Width int32 `json:"width"`
}

// CocktailImageModel2 defines model for CocktailImageModel2.
type CocktailImageModel2 struct {
	// Height The height of the image
	Height int32 `json:"height"`

	// Uri The uri of the image
	Uri string `json:"uri"`

	// Width The width of the image
	Width int32 `json:"width"`
}

// CocktailIngredientFiltersRs defines model for CocktailIngredientFiltersRs.
type CocktailIngredientFiltersRs struct {
	// BeerWineChampagne The cocktail ingredient filters for searching against beers, wines and champagnes
	BeerWineChampagne []IngredientFilterModel12 `json:"beerWineChampagne"`

	// Bitters The cocktail ingredient filters for searching against bitters
	Bitters []IngredientFilterModel8 `json:"bitters"`

	// Dilutions The cocktail ingredient filters for searching against dilutions
	Dilutions []IngredientFilterModel11 `json:"dilutions"`

	// Eras The cocktail ingredient filters for searching against eras when cocktails were established
	Eras []IngredientFilterModel13 `json:"eras"`

	// Fruits The cocktail ingredient filters for searching against friuts
	Fruits []IngredientFilterModel4 `json:"fruits"`

	// Glassware The cocktail ingredient filters for searching against recommended glassware
	Glassware []IngredientFilterModel `json:"glassware"`

	// HerbsAndFlowers The cocktail ingredient filters for searching against herbs and flowers
	HerbsAndFlowers []IngredientFilterModel6 `json:"herbsAndFlowers"`

	// Juices The cocktail ingredient filters for searching against juices
	Juices []IngredientFilterModel10 `json:"juices"`

	// Liqueurs The cocktail ingredient filters for searching against liqueurs
	Liqueurs []IngredientFilterModel3 `json:"liqueurs"`

	// Proteins The cocktail ingredient filters for searching against proteins
	Proteins []IngredientFilterModel9 `json:"proteins"`

	// Spirits The cocktail ingredient filters for searching against spirits
	Spirits []IngredientFilterModel2 `json:"spirits"`

	// SyrupsAndSauces The cocktail ingredient filters for searching against syrups and sauces
	SyrupsAndSauces []IngredientFilterModel7 `json:"syrupsAndSauces"`

	// Vegetables The cocktail ingredient filters for searching against vegetables
	Vegetables []IngredientFilterModel5 `json:"vegetables"`
}

// CocktailModel The cocktail recipe model
type CocktailModel struct {
	// Content The complete descriptive cocktail recipe including ingredients, directions and historical information in markdown format
	Content string `json:"content"`

	// Description A brief editorial description for the cocktail recipe
	Description string `json:"description"`

	// DescriptiveTitle A more descriptive title for the cocktail recipe, generally used as an editorial title
	DescriptiveTitle string `json:"descriptiveTitle"`

	// Glassware The recommended glassware to use when serving the cocktail
	Glassware []GlasswareTypeModel `json:"glassware"`

	// Id The cocktail recipe unique identifier
	Id string `json:"id"`

	// Ingredients The list of ingredients that make up the cocktail recipe
	Ingredients []IngredientModel `json:"ingredients"`

	// Instructions The list of instructions to make the cocktail recipe
	Instructions []InstructionStepModel `json:"instructions"`

	// IsIba Whether or not the cocktail represented by this recipe is recognized by the International Bartenders Association
	IsIba bool `json:"isIba"`

	// MainImages A list of primary images for the cocktail recipe
	MainImages []CocktailImageModel `json:"mainImages"`

	// ModifiedOn The date this cocktail recipe was last modified on Cezzis.Com
	ModifiedOn time.Time `json:"modifiedOn"`

	// PrepTimeMinutes The average number of minutes to build the cocktail using this recipe
	PrepTimeMinutes int32 `json:"prepTimeMinutes"`

	// PublishedOn The date this cocktail recipe was published on Cezzis.Com
	PublishedOn time.Time `json:"publishedOn"`

	// Rating A ratings for this cocktail
	Rating CocktailRatingModel `json:"rating"`

	// SearchTiles A list of secondary, smaller sized images for the cocktail recipe
	SearchTiles []CocktailImageModel2 `json:"searchTiles"`

	// SearchableTitles A list of titles that are queried against when issuing cocktail recipe search queries
	SearchableTitles []string `json:"searchableTitles"`

	// Serves The number of people the cocktail recipe serves
	Serves int32 `json:"serves"`

	// Tags A list of taxonomy tags defining the cocktail recipe
	Tags []string `json:"tags"`

	// Title The name of the cocktail recipe
	Title string `json:"title"`
}

// CocktailRatingModel A ratings for this cocktail
type CocktailRatingModel struct {
	// FiveStars The number of five star ratings
	FiveStars int32 `json:"fiveStars"`

	// FourStars The number of four star ratings
	FourStars int32 `json:"fourStars"`

	// OneStars The number of one star ratings
	OneStars int32 `json:"oneStars"`

	// Rating The actual overal rating
	Rating float64 `json:"rating"`

	// RatingCount The total number of ratings given
	RatingCount int32 `json:"ratingCount"`

	// ThreeStars The number of three star ratings
	ThreeStars int32 `json:"threeStars"`

	// TotalStars The total number of stars given
	TotalStars int32 `json:"totalStars"`

	// TwoStars The number of two star ratings
	TwoStars int32 `json:"twoStars"`
}

// CocktailRecommendationModel The cocktail recommendation model
type CocktailRecommendationModel struct {
	// Directions The directions description of the cocktail or variation
	Directions string `json:"directions"`

	// Ingredients The ingredients description of the cocktail or variation
	Ingredients string `json:"ingredients"`

	// Name The name of the cocktail or variation
	Name string `json:"name"`
}

// CocktailRecommendationRq defines model for CocktailRecommendationRq.
type CocktailRecommendationRq struct {
	// Recommendation The cocktail recommendation model
	Recommendation CocktailRecommendationModel `json:"recommendation"`

	// VerificationCode The google recaptcha verification code returned after being valid
	VerificationCode string `json:"verificationCode"`
}

// CocktailRs defines model for CocktailRs.
type CocktailRs struct {
	// Item The cocktail recipe model
	Item CocktailModel `json:"item"`
}

// CocktailUpdatedNotificationModel The notification setting to use when new cocktail addtions are added
type CocktailUpdatedNotificationModel = interface{}

// CocktailsListModel defines model for CocktailsListModel.
type CocktailsListModel struct {
	// DescriptiveTitle A more descriptive title for the cocktail recipe, generally used as an editorial title
	DescriptiveTitle string `json:"descriptiveTitle"`

	// Glassware The recommended glassware to use when serving the cocktail
	Glassware []GlasswareTypeModel `json:"glassware"`

	// Id The cocktail recipe unique identifier
	Id string `json:"id"`

	// Ingredients The list of ingredients that make up the cocktail recipe
	Ingredients []IngredientModel `json:"ingredients"`

	// IsIba Whether or not the cocktail represented by this recipe is recognized by the International Bartenders Association
	IsIba bool `json:"isIba"`

	// MainImages A list of primary image uris for the cocktail recipe
	MainImages []string `json:"mainImages"`

	// PrepTimeMinutes The average number of minutes to build the cocktail using this recipe
	PrepTimeMinutes int32 `json:"prepTimeMinutes"`

	// Rating The overral rating for the recipe
	Rating float64 `json:"rating"`

	// SearchTiles A list of secondary, smaller sized image uris for the cocktail recipe
	SearchTiles []string `json:"searchTiles"`

	// Serves The number of people the cocktail recipe serves
	Serves int32 `json:"serves"`

	// Title The name of the cocktail recipe
	Title string `json:"title"`
}

// CocktailsListRs defines model for CocktailsListRs.
type CocktailsListRs struct {
	// Items A list of cocktail recipe list models
	Items []CocktailsListModel `json:"items"`
}

// DisplayThemeModel The accessibility theme
type DisplayThemeModel = interface{}

// DisplayThemeModel2 The display theme (light, dark)
type DisplayThemeModel2 = interface{}

// DocumentFormat The format that the document content is in
type DocumentFormat = interface{}

// GlasswareTypeModel defines model for GlasswareTypeModel.
type GlasswareTypeModel = interface{}

// IFormFile defines model for IFormFile.
type IFormFile = openapi_types.File

// IngredientApplicationModel defines model for IngredientApplicationModel.
type IngredientApplicationModel = interface{}

// IngredientFilterModel defines model for IngredientFilterModel.
type IngredientFilterModel struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel10 defines model for IngredientFilterModel10.
type IngredientFilterModel10 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel11 defines model for IngredientFilterModel11.
type IngredientFilterModel11 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel12 defines model for IngredientFilterModel12.
type IngredientFilterModel12 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel13 defines model for IngredientFilterModel13.
type IngredientFilterModel13 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel2 defines model for IngredientFilterModel2.
type IngredientFilterModel2 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel3 defines model for IngredientFilterModel3.
type IngredientFilterModel3 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel4 defines model for IngredientFilterModel4.
type IngredientFilterModel4 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel5 defines model for IngredientFilterModel5.
type IngredientFilterModel5 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel6 defines model for IngredientFilterModel6.
type IngredientFilterModel6 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel7 defines model for IngredientFilterModel7.
type IngredientFilterModel7 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel8 defines model for IngredientFilterModel8.
type IngredientFilterModel8 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientFilterModel9 defines model for IngredientFilterModel9.
type IngredientFilterModel9 struct {
	// Id The filter identifier
	Id string `json:"id"`

	// Name The display name of the filter
	Name string `json:"name"`
}

// IngredientModel defines model for IngredientModel.
type IngredientModel struct {
	// Applications The ingredient applications that this ingredient is in relation to the cocktail recipe
	Applications []IngredientApplicationModel `json:"applications"`

	// Display Gets the complete display value for the ingredient including units and measurments
	Display string `json:"display"`

	// Name The name of the ingredient
	Name string `json:"name"`

	// Preparation Any preparation that should be made with this ingredient
	Preparation PreparationTypeModel `json:"preparation"`

	// Requirement Whether or not this ingredient is required ('Required' or 'Optional')
	Requirement IngredientRequirementTypeModel `json:"requirement"`

	// Suggestions Suggestion when using this ingredient
	Suggestions string `json:"suggestions"`

	// Types The ingredient types that this ingredient is in relation to the cocktail recipe
	Types []IngredientTypeModel `json:"types"`

	// Units The number of units to use in relation to the UoM (unit of measure) in the cocktail recipe
	Units float32 `json:"units"`

	// UoM The unit of measure when using this ingredient in a cocktail recipe
	UoM UofMTypeModel `json:"uoM"`
}

// IngredientRequirementTypeModel Whether or not this ingredient is required ('Required' or 'Optional')
type IngredientRequirementTypeModel = interface{}

// IngredientTypeModel defines model for IngredientTypeModel.
type IngredientTypeModel = interface{}

// InstructionStepModel defines model for InstructionStepModel.
type InstructionStepModel struct {
	// Display The displayable value for the instruction step
	Display string `json:"display"`

	// Order The order of the instruction step in which it should be performed
	Order int32 `json:"order"`
}

// LegalDocumentRs defines model for LegalDocumentRs.
type LegalDocumentRs struct {
	// Document The document content
	Document string `json:"document"`

	// Format The format that the document content is in
	Format DocumentFormat `json:"format"`
}

// ManageFavoriteCocktailsRq defines model for ManageFavoriteCocktailsRq.
type ManageFavoriteCocktailsRq struct {
	CocktailActions []CocktailFavoriteActionModel `json:"cocktailActions"`
}

// PreparationTypeModel Any preparation that should be made with this ingredient
type PreparationTypeModel = interface{}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail   *string `json:"detail"`
	Instance *string `json:"instance"`
	Status   *int32  `json:"status"`
	Title    *string `json:"title"`
	Type     *string `json:"type"`
}

// RateCocktailRq defines model for RateCocktailRq.
type RateCocktailRq struct {
	// CocktailId The cocktail identifier
	CocktailId string `json:"cocktailId"`

	// Stars The rating for the cocktail (1-5)
	Stars int32 `json:"stars"`
}

// RateCocktailRs defines model for RateCocktailRs.
type RateCocktailRs struct {
	// CocktailId The cocktail identifier
	CocktailId string `json:"cocktailId"`

	// CocktailRating The cocktail rating values
	CocktailRating AccountCocktailRatingModel `json:"cocktailRating"`

	// Ratings The cocktail ratings
	Ratings []AccountCocktailRatingsModel `json:"ratings"`
}

// UofMTypeModel The unit of measure when using this ingredient in a cocktail recipe
type UofMTypeModel = interface{}

// UpdateAccountOwnedAccessibilitySettingsRq defines model for UpdateAccountOwnedAccessibilitySettingsRq.
type UpdateAccountOwnedAccessibilitySettingsRq struct {
	// Theme The display theme (light, dark)
	Theme DisplayThemeModel2 `json:"theme"`
}

// UpdateAccountOwnedNotificationSettingsRq defines model for UpdateAccountOwnedNotificationSettingsRq.
type UpdateAccountOwnedNotificationSettingsRq struct {
	// OnNewCocktailAdditions The notification setting to use when new cocktail addtions are added
	OnNewCocktailAdditions CocktailUpdatedNotificationModel `json:"onNewCocktailAdditions"`
}

// UpdateAccountOwnedProfileEmailRq defines model for UpdateAccountOwnedProfileEmailRq.
type UpdateAccountOwnedProfileEmailRq struct {
	// Email The email address for the account
	Email string `json:"email"`
}

// UpdateAccountOwnedProfileRq defines model for UpdateAccountOwnedProfileRq.
type UpdateAccountOwnedProfileRq struct {
	// DisplayName The display for the account visible to other users
	DisplayName string `json:"displayName"`

	// FamilyName The family name on the account
	FamilyName string `json:"familyName"`

	// GivenName The given name on the account
	GivenName string `json:"givenName"`

	// PrimaryAddress The optional primary address listed with the account
	PrimaryAddress AccountAddressModel `json:"primaryAddress"`
}

// UploadProfileImageRs defines model for UploadProfileImageRs.
type UploadProfileImageRs struct {
	// ImageUri The uri for the image that was uploaded
	ImageUri string `json:"imageUri"`
}

// GetAccountOwnedProfileParams defines parameters for GetAccountOwnedProfile.
type GetAccountOwnedProfileParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// LoginAccountOwnedProfileParams defines parameters for LoginAccountOwnedProfile.
type LoginAccountOwnedProfileParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// UpdateAccountOwnedProfileParams defines parameters for UpdateAccountOwnedProfile.
type UpdateAccountOwnedProfileParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// UpdateAccountOwnedAccessibilitySettingsParams defines parameters for UpdateAccountOwnedAccessibilitySettings.
type UpdateAccountOwnedAccessibilitySettingsParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// ManageFavoriteCocktailsParams defines parameters for ManageFavoriteCocktails.
type ManageFavoriteCocktailsParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// GetCocktailRatingsParams defines parameters for GetCocktailRatings.
type GetCocktailRatingsParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// RateCocktailParams defines parameters for RateCocktail.
type RateCocktailParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// SendCocktailRecommendationParams defines parameters for SendCocktailRecommendation.
type SendCocktailRecommendationParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// UpdateAccountOwnedProfileEmailParams defines parameters for UpdateAccountOwnedProfileEmail.
type UpdateAccountOwnedProfileEmailParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// UploadProfileImageMultipartBody defines parameters for UploadProfileImage.
type UploadProfileImageMultipartBody struct {
	File *IFormFile `json:"file,omitempty"`
}

// UploadProfileImageParams defines parameters for UploadProfileImage.
type UploadProfileImageParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// UpdateAccountOwnedNotificationSettingsParams defines parameters for UpdateAccountOwnedNotificationSettings.
type UpdateAccountOwnedNotificationSettingsParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// GetCocktailsListParams defines parameters for GetCocktailsList.
type GetCocktailsListParams struct {
	// FreeText The free text search term to match against
	FreeText *string `form:"freeText,omitempty" json:"freeText,omitempty"`

	// Skip The number of cocktail recipes to skip from the paged response
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Take The number of cocktail recipes to return
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// M A list of cocktails that can be included in the list
	M *[]string `form:"m,omitempty" json:"m,omitempty"`

	// MatchExclusive Whether or not the supplied matches must be exclusively returned
	MatchExclusive *bool `form:"match-exclusive,omitempty" json:"match-exclusive,omitempty"`

	// Inc The list of extension objects to include for each cocktail recipe
	Inc *[]CocktailDataIncludeModel `form:"inc,omitempty" json:"inc,omitempty"`

	// Sf An optional list of filters to use when quering the cocktail recipes
	Sf *[]string `form:"sf,omitempty" json:"sf,omitempty"`

	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// SeedCocktailsParams defines parameters for SeedCocktails.
type SeedCocktailsParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// SeedIngredientsParams defines parameters for SeedIngredients.
type SeedIngredientsParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// GetCocktailIngredientFiltersParams defines parameters for GetCocktailIngredientFilters.
type GetCocktailIngredientFiltersParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// GetCocktailParams defines parameters for GetCocktail.
type GetCocktailParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// GetPrivacyPolicyParams defines parameters for GetPrivacyPolicy.
type GetPrivacyPolicyParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// GetTermsOfServiceParams defines parameters for GetTermsOfService.
type GetTermsOfServiceParams struct {
	// XKey Subscription key
	XKey *string `json:"X-Key,omitempty"`
}

// UpdateAccountOwnedProfileApplicationJSONXAPIVersion10RequestBody defines body for UpdateAccountOwnedProfile for application/json; x-api-version=1.0 ContentType.
type UpdateAccountOwnedProfileApplicationJSONXAPIVersion10RequestBody = UpdateAccountOwnedProfileRq

// UpdateAccountOwnedAccessibilitySettingsApplicationJSONXAPIVersion10RequestBody defines body for UpdateAccountOwnedAccessibilitySettings for application/json; x-api-version=1.0 ContentType.
type UpdateAccountOwnedAccessibilitySettingsApplicationJSONXAPIVersion10RequestBody = UpdateAccountOwnedAccessibilitySettingsRq

// ManageFavoriteCocktailsApplicationJSONXAPIVersion10RequestBody defines body for ManageFavoriteCocktails for application/json; x-api-version=1.0 ContentType.
type ManageFavoriteCocktailsApplicationJSONXAPIVersion10RequestBody = ManageFavoriteCocktailsRq

// RateCocktailApplicationJSONXAPIVersion10RequestBody defines body for RateCocktail for application/json; x-api-version=1.0 ContentType.
type RateCocktailApplicationJSONXAPIVersion10RequestBody = RateCocktailRq

// SendCocktailRecommendationApplicationJSONXAPIVersion10RequestBody defines body for SendCocktailRecommendation for application/json; x-api-version=1.0 ContentType.
type SendCocktailRecommendationApplicationJSONXAPIVersion10RequestBody = CocktailRecommendationRq

// UpdateAccountOwnedProfileEmailApplicationJSONXAPIVersion10RequestBody defines body for UpdateAccountOwnedProfileEmail for application/json; x-api-version=1.0 ContentType.
type UpdateAccountOwnedProfileEmailApplicationJSONXAPIVersion10RequestBody = UpdateAccountOwnedProfileEmailRq

// UploadProfileImageMultipartRequestBody defines body for UploadProfileImage for multipart/form-data; x-api-version=1.0 ContentType.
type UploadProfileImageMultipartRequestBody UploadProfileImageMultipartBody

// UpdateAccountOwnedNotificationSettingsApplicationJSONXAPIVersion10RequestBody defines body for UpdateAccountOwnedNotificationSettings for application/json; x-api-version=1.0 ContentType.
type UpdateAccountOwnedNotificationSettingsApplicationJSONXAPIVersion10RequestBody = UpdateAccountOwnedNotificationSettingsRq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccountOwnedProfile request
	GetAccountOwnedProfile(ctx context.Context, params *GetAccountOwnedProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginAccountOwnedProfile request
	LoginAccountOwnedProfile(ctx context.Context, params *LoginAccountOwnedProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountOwnedProfileWithBody request with any body
	UpdateAccountOwnedProfileWithBody(ctx context.Context, params *UpdateAccountOwnedProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccountOwnedProfileWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *UpdateAccountOwnedProfileParams, body UpdateAccountOwnedProfileApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountOwnedAccessibilitySettingsWithBody request with any body
	UpdateAccountOwnedAccessibilitySettingsWithBody(ctx context.Context, params *UpdateAccountOwnedAccessibilitySettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccountOwnedAccessibilitySettingsWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *UpdateAccountOwnedAccessibilitySettingsParams, body UpdateAccountOwnedAccessibilitySettingsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManageFavoriteCocktailsWithBody request with any body
	ManageFavoriteCocktailsWithBody(ctx context.Context, params *ManageFavoriteCocktailsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManageFavoriteCocktailsWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *ManageFavoriteCocktailsParams, body ManageFavoriteCocktailsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCocktailRatings request
	GetCocktailRatings(ctx context.Context, params *GetCocktailRatingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RateCocktailWithBody request with any body
	RateCocktailWithBody(ctx context.Context, params *RateCocktailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RateCocktailWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *RateCocktailParams, body RateCocktailApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendCocktailRecommendationWithBody request with any body
	SendCocktailRecommendationWithBody(ctx context.Context, params *SendCocktailRecommendationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendCocktailRecommendationWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *SendCocktailRecommendationParams, body SendCocktailRecommendationApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountOwnedProfileEmailWithBody request with any body
	UpdateAccountOwnedProfileEmailWithBody(ctx context.Context, params *UpdateAccountOwnedProfileEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccountOwnedProfileEmailWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *UpdateAccountOwnedProfileEmailParams, body UpdateAccountOwnedProfileEmailApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadProfileImageWithBody request with any body
	UploadProfileImageWithBody(ctx context.Context, params *UploadProfileImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountOwnedNotificationSettingsWithBody request with any body
	UpdateAccountOwnedNotificationSettingsWithBody(ctx context.Context, params *UpdateAccountOwnedNotificationSettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccountOwnedNotificationSettingsWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *UpdateAccountOwnedNotificationSettingsParams, body UpdateAccountOwnedNotificationSettingsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCocktailsList request
	GetCocktailsList(ctx context.Context, params *GetCocktailsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeedCocktails request
	SeedCocktails(ctx context.Context, params *SeedCocktailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeedIngredients request
	SeedIngredients(ctx context.Context, params *SeedIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCocktailIngredientFilters request
	GetCocktailIngredientFilters(ctx context.Context, params *GetCocktailIngredientFiltersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCocktail request
	GetCocktail(ctx context.Context, id string, params *GetCocktailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrivacyPolicy request
	GetPrivacyPolicy(ctx context.Context, params *GetPrivacyPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTermsOfService request
	GetTermsOfService(ctx context.Context, params *GetTermsOfServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccountOwnedProfile(ctx context.Context, params *GetAccountOwnedProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountOwnedProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginAccountOwnedProfile(ctx context.Context, params *LoginAccountOwnedProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginAccountOwnedProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountOwnedProfileWithBody(ctx context.Context, params *UpdateAccountOwnedProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountOwnedProfileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountOwnedProfileWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *UpdateAccountOwnedProfileParams, body UpdateAccountOwnedProfileApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountOwnedProfileRequestWithApplicationJSONXAPIVersion10Body(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountOwnedAccessibilitySettingsWithBody(ctx context.Context, params *UpdateAccountOwnedAccessibilitySettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountOwnedAccessibilitySettingsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountOwnedAccessibilitySettingsWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *UpdateAccountOwnedAccessibilitySettingsParams, body UpdateAccountOwnedAccessibilitySettingsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountOwnedAccessibilitySettingsRequestWithApplicationJSONXAPIVersion10Body(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManageFavoriteCocktailsWithBody(ctx context.Context, params *ManageFavoriteCocktailsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManageFavoriteCocktailsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManageFavoriteCocktailsWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *ManageFavoriteCocktailsParams, body ManageFavoriteCocktailsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManageFavoriteCocktailsRequestWithApplicationJSONXAPIVersion10Body(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCocktailRatings(ctx context.Context, params *GetCocktailRatingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCocktailRatingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RateCocktailWithBody(ctx context.Context, params *RateCocktailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRateCocktailRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RateCocktailWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *RateCocktailParams, body RateCocktailApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRateCocktailRequestWithApplicationJSONXAPIVersion10Body(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCocktailRecommendationWithBody(ctx context.Context, params *SendCocktailRecommendationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCocktailRecommendationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCocktailRecommendationWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *SendCocktailRecommendationParams, body SendCocktailRecommendationApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCocktailRecommendationRequestWithApplicationJSONXAPIVersion10Body(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountOwnedProfileEmailWithBody(ctx context.Context, params *UpdateAccountOwnedProfileEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountOwnedProfileEmailRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountOwnedProfileEmailWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *UpdateAccountOwnedProfileEmailParams, body UpdateAccountOwnedProfileEmailApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountOwnedProfileEmailRequestWithApplicationJSONXAPIVersion10Body(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadProfileImageWithBody(ctx context.Context, params *UploadProfileImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadProfileImageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountOwnedNotificationSettingsWithBody(ctx context.Context, params *UpdateAccountOwnedNotificationSettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountOwnedNotificationSettingsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountOwnedNotificationSettingsWithApplicationJSONXAPIVersion10Body(ctx context.Context, params *UpdateAccountOwnedNotificationSettingsParams, body UpdateAccountOwnedNotificationSettingsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountOwnedNotificationSettingsRequestWithApplicationJSONXAPIVersion10Body(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCocktailsList(ctx context.Context, params *GetCocktailsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCocktailsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeedCocktails(ctx context.Context, params *SeedCocktailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeedCocktailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeedIngredients(ctx context.Context, params *SeedIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeedIngredientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCocktailIngredientFilters(ctx context.Context, params *GetCocktailIngredientFiltersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCocktailIngredientFiltersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCocktail(ctx context.Context, id string, params *GetCocktailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCocktailRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrivacyPolicy(ctx context.Context, params *GetPrivacyPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrivacyPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTermsOfService(ctx context.Context, params *GetTermsOfServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTermsOfServiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountOwnedProfileRequest generates requests for GetAccountOwnedProfile
func NewGetAccountOwnedProfileRequest(server string, params *GetAccountOwnedProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewLoginAccountOwnedProfileRequest generates requests for LoginAccountOwnedProfile
func NewLoginAccountOwnedProfileRequest(server string, params *LoginAccountOwnedProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateAccountOwnedProfileRequestWithApplicationJSONXAPIVersion10Body calls the generic UpdateAccountOwnedProfile builder with application/json; x-api-version=1.0 body
func NewUpdateAccountOwnedProfileRequestWithApplicationJSONXAPIVersion10Body(server string, params *UpdateAccountOwnedProfileParams, body UpdateAccountOwnedProfileApplicationJSONXAPIVersion10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountOwnedProfileRequestWithBody(server, params, "application/json; x-api-version=1.0", bodyReader)
}

// NewUpdateAccountOwnedProfileRequestWithBody generates requests for UpdateAccountOwnedProfile with any type of body
func NewUpdateAccountOwnedProfileRequestWithBody(server string, params *UpdateAccountOwnedProfileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateAccountOwnedAccessibilitySettingsRequestWithApplicationJSONXAPIVersion10Body calls the generic UpdateAccountOwnedAccessibilitySettings builder with application/json; x-api-version=1.0 body
func NewUpdateAccountOwnedAccessibilitySettingsRequestWithApplicationJSONXAPIVersion10Body(server string, params *UpdateAccountOwnedAccessibilitySettingsParams, body UpdateAccountOwnedAccessibilitySettingsApplicationJSONXAPIVersion10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountOwnedAccessibilitySettingsRequestWithBody(server, params, "application/json; x-api-version=1.0", bodyReader)
}

// NewUpdateAccountOwnedAccessibilitySettingsRequestWithBody generates requests for UpdateAccountOwnedAccessibilitySettings with any type of body
func NewUpdateAccountOwnedAccessibilitySettingsRequestWithBody(server string, params *UpdateAccountOwnedAccessibilitySettingsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile/accessibility")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewManageFavoriteCocktailsRequestWithApplicationJSONXAPIVersion10Body calls the generic ManageFavoriteCocktails builder with application/json; x-api-version=1.0 body
func NewManageFavoriteCocktailsRequestWithApplicationJSONXAPIVersion10Body(server string, params *ManageFavoriteCocktailsParams, body ManageFavoriteCocktailsApplicationJSONXAPIVersion10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManageFavoriteCocktailsRequestWithBody(server, params, "application/json; x-api-version=1.0", bodyReader)
}

// NewManageFavoriteCocktailsRequestWithBody generates requests for ManageFavoriteCocktails with any type of body
func NewManageFavoriteCocktailsRequestWithBody(server string, params *ManageFavoriteCocktailsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile/cocktails/favorites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewGetCocktailRatingsRequest generates requests for GetCocktailRatings
func NewGetCocktailRatingsRequest(server string, params *GetCocktailRatingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile/cocktails/ratings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewRateCocktailRequestWithApplicationJSONXAPIVersion10Body calls the generic RateCocktail builder with application/json; x-api-version=1.0 body
func NewRateCocktailRequestWithApplicationJSONXAPIVersion10Body(server string, params *RateCocktailParams, body RateCocktailApplicationJSONXAPIVersion10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRateCocktailRequestWithBody(server, params, "application/json; x-api-version=1.0", bodyReader)
}

// NewRateCocktailRequestWithBody generates requests for RateCocktail with any type of body
func NewRateCocktailRequestWithBody(server string, params *RateCocktailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile/cocktails/ratings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewSendCocktailRecommendationRequestWithApplicationJSONXAPIVersion10Body calls the generic SendCocktailRecommendation builder with application/json; x-api-version=1.0 body
func NewSendCocktailRecommendationRequestWithApplicationJSONXAPIVersion10Body(server string, params *SendCocktailRecommendationParams, body SendCocktailRecommendationApplicationJSONXAPIVersion10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendCocktailRecommendationRequestWithBody(server, params, "application/json; x-api-version=1.0", bodyReader)
}

// NewSendCocktailRecommendationRequestWithBody generates requests for SendCocktailRecommendation with any type of body
func NewSendCocktailRecommendationRequestWithBody(server string, params *SendCocktailRecommendationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile/cocktails/recommendations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateAccountOwnedProfileEmailRequestWithApplicationJSONXAPIVersion10Body calls the generic UpdateAccountOwnedProfileEmail builder with application/json; x-api-version=1.0 body
func NewUpdateAccountOwnedProfileEmailRequestWithApplicationJSONXAPIVersion10Body(server string, params *UpdateAccountOwnedProfileEmailParams, body UpdateAccountOwnedProfileEmailApplicationJSONXAPIVersion10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountOwnedProfileEmailRequestWithBody(server, params, "application/json; x-api-version=1.0", bodyReader)
}

// NewUpdateAccountOwnedProfileEmailRequestWithBody generates requests for UpdateAccountOwnedProfileEmail with any type of body
func NewUpdateAccountOwnedProfileEmailRequestWithBody(server string, params *UpdateAccountOwnedProfileEmailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewUploadProfileImageRequestWithBody generates requests for UploadProfileImage with any type of body
func NewUploadProfileImageRequestWithBody(server string, params *UploadProfileImageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateAccountOwnedNotificationSettingsRequestWithApplicationJSONXAPIVersion10Body calls the generic UpdateAccountOwnedNotificationSettings builder with application/json; x-api-version=1.0 body
func NewUpdateAccountOwnedNotificationSettingsRequestWithApplicationJSONXAPIVersion10Body(server string, params *UpdateAccountOwnedNotificationSettingsParams, body UpdateAccountOwnedNotificationSettingsApplicationJSONXAPIVersion10RequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountOwnedNotificationSettingsRequestWithBody(server, params, "application/json; x-api-version=1.0", bodyReader)
}

// NewUpdateAccountOwnedNotificationSettingsRequestWithBody generates requests for UpdateAccountOwnedNotificationSettings with any type of body
func NewUpdateAccountOwnedNotificationSettingsRequestWithBody(server string, params *UpdateAccountOwnedNotificationSettingsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/accounts/owned/profile/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewGetCocktailsListRequest generates requests for GetCocktailsList
func NewGetCocktailsListRequest(server string, params *GetCocktailsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cocktails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FreeText != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "freeText", runtime.ParamLocationQuery, *params.FreeText); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.M != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "m", runtime.ParamLocationQuery, *params.M); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchExclusive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "match-exclusive", runtime.ParamLocationQuery, *params.MatchExclusive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Inc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inc", runtime.ParamLocationQuery, *params.Inc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sf != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sf", runtime.ParamLocationQuery, *params.Sf); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewSeedCocktailsRequest generates requests for SeedCocktails
func NewSeedCocktailsRequest(server string, params *SeedCocktailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cocktails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewSeedIngredientsRequest generates requests for SeedIngredients
func NewSeedIngredientsRequest(server string, params *SeedIngredientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cocktails/ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewGetCocktailIngredientFiltersRequest generates requests for GetCocktailIngredientFilters
func NewGetCocktailIngredientFiltersRequest(server string, params *GetCocktailIngredientFiltersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cocktails/ingredients/filters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewGetCocktailRequest generates requests for GetCocktail
func NewGetCocktailRequest(server string, id string, params *GetCocktailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cocktails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewGetPrivacyPolicyRequest generates requests for GetPrivacyPolicy
func NewGetPrivacyPolicyRequest(server string, params *GetPrivacyPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/legal/documents/privacy-policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

// NewGetTermsOfServiceRequest generates requests for GetTermsOfService
func NewGetTermsOfServiceRequest(server string, params *GetTermsOfServiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/legal/documents/terms-of-service")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Key", runtime.ParamLocationHeader, *params.XKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Key", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountOwnedProfileWithResponse request
	GetAccountOwnedProfileWithResponse(ctx context.Context, params *GetAccountOwnedProfileParams, reqEditors ...RequestEditorFn) (*GetAccountOwnedProfileResponse, error)

	// LoginAccountOwnedProfileWithResponse request
	LoginAccountOwnedProfileWithResponse(ctx context.Context, params *LoginAccountOwnedProfileParams, reqEditors ...RequestEditorFn) (*LoginAccountOwnedProfileResponse, error)

	// UpdateAccountOwnedProfileWithBodyWithResponse request with any body
	UpdateAccountOwnedProfileWithBodyWithResponse(ctx context.Context, params *UpdateAccountOwnedProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedProfileResponse, error)

	UpdateAccountOwnedProfileWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *UpdateAccountOwnedProfileParams, body UpdateAccountOwnedProfileApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedProfileResponse, error)

	// UpdateAccountOwnedAccessibilitySettingsWithBodyWithResponse request with any body
	UpdateAccountOwnedAccessibilitySettingsWithBodyWithResponse(ctx context.Context, params *UpdateAccountOwnedAccessibilitySettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedAccessibilitySettingsResponse, error)

	UpdateAccountOwnedAccessibilitySettingsWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *UpdateAccountOwnedAccessibilitySettingsParams, body UpdateAccountOwnedAccessibilitySettingsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedAccessibilitySettingsResponse, error)

	// ManageFavoriteCocktailsWithBodyWithResponse request with any body
	ManageFavoriteCocktailsWithBodyWithResponse(ctx context.Context, params *ManageFavoriteCocktailsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManageFavoriteCocktailsResponse, error)

	ManageFavoriteCocktailsWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *ManageFavoriteCocktailsParams, body ManageFavoriteCocktailsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*ManageFavoriteCocktailsResponse, error)

	// GetCocktailRatingsWithResponse request
	GetCocktailRatingsWithResponse(ctx context.Context, params *GetCocktailRatingsParams, reqEditors ...RequestEditorFn) (*GetCocktailRatingsResponse, error)

	// RateCocktailWithBodyWithResponse request with any body
	RateCocktailWithBodyWithResponse(ctx context.Context, params *RateCocktailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RateCocktailResponse, error)

	RateCocktailWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *RateCocktailParams, body RateCocktailApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*RateCocktailResponse, error)

	// SendCocktailRecommendationWithBodyWithResponse request with any body
	SendCocktailRecommendationWithBodyWithResponse(ctx context.Context, params *SendCocktailRecommendationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCocktailRecommendationResponse, error)

	SendCocktailRecommendationWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *SendCocktailRecommendationParams, body SendCocktailRecommendationApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*SendCocktailRecommendationResponse, error)

	// UpdateAccountOwnedProfileEmailWithBodyWithResponse request with any body
	UpdateAccountOwnedProfileEmailWithBodyWithResponse(ctx context.Context, params *UpdateAccountOwnedProfileEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedProfileEmailResponse, error)

	UpdateAccountOwnedProfileEmailWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *UpdateAccountOwnedProfileEmailParams, body UpdateAccountOwnedProfileEmailApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedProfileEmailResponse, error)

	// UploadProfileImageWithBodyWithResponse request with any body
	UploadProfileImageWithBodyWithResponse(ctx context.Context, params *UploadProfileImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadProfileImageResponse, error)

	// UpdateAccountOwnedNotificationSettingsWithBodyWithResponse request with any body
	UpdateAccountOwnedNotificationSettingsWithBodyWithResponse(ctx context.Context, params *UpdateAccountOwnedNotificationSettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedNotificationSettingsResponse, error)

	UpdateAccountOwnedNotificationSettingsWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *UpdateAccountOwnedNotificationSettingsParams, body UpdateAccountOwnedNotificationSettingsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedNotificationSettingsResponse, error)

	// GetCocktailsListWithResponse request
	GetCocktailsListWithResponse(ctx context.Context, params *GetCocktailsListParams, reqEditors ...RequestEditorFn) (*GetCocktailsListResponse, error)

	// SeedCocktailsWithResponse request
	SeedCocktailsWithResponse(ctx context.Context, params *SeedCocktailsParams, reqEditors ...RequestEditorFn) (*SeedCocktailsResponse, error)

	// SeedIngredientsWithResponse request
	SeedIngredientsWithResponse(ctx context.Context, params *SeedIngredientsParams, reqEditors ...RequestEditorFn) (*SeedIngredientsResponse, error)

	// GetCocktailIngredientFiltersWithResponse request
	GetCocktailIngredientFiltersWithResponse(ctx context.Context, params *GetCocktailIngredientFiltersParams, reqEditors ...RequestEditorFn) (*GetCocktailIngredientFiltersResponse, error)

	// GetCocktailWithResponse request
	GetCocktailWithResponse(ctx context.Context, id string, params *GetCocktailParams, reqEditors ...RequestEditorFn) (*GetCocktailResponse, error)

	// GetPrivacyPolicyWithResponse request
	GetPrivacyPolicyWithResponse(ctx context.Context, params *GetPrivacyPolicyParams, reqEditors ...RequestEditorFn) (*GetPrivacyPolicyResponse, error)

	// GetTermsOfServiceWithResponse request
	GetTermsOfServiceWithResponse(ctx context.Context, params *GetTermsOfServiceParams, reqEditors ...RequestEditorFn) (*GetTermsOfServiceResponse, error)
}

type GetAccountOwnedProfileResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *AccountOwnedProfileRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAccountOwnedProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountOwnedProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginAccountOwnedProfileResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *AccountOwnedProfileRs
	ApplicationjsonXApiVersion10201     *AccountOwnedProfileRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r LoginAccountOwnedProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginAccountOwnedProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountOwnedProfileResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *AccountOwnedProfileRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateAccountOwnedProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountOwnedProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountOwnedAccessibilitySettingsResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *AccountOwnedProfileRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateAccountOwnedAccessibilitySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountOwnedAccessibilitySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManageFavoriteCocktailsResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *AccountOwnedProfileRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r ManageFavoriteCocktailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManageFavoriteCocktailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCocktailRatingsResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *AccountCocktailRatingsRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetCocktailRatingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCocktailRatingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RateCocktailResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10201     *RateCocktailRs
	ApplicationjsonXApiVersion10409     *ProblemDetails
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r RateCocktailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RateCocktailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendCocktailRecommendationResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SendCocktailRecommendationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendCocktailRecommendationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountOwnedProfileEmailResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *AccountOwnedProfileRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateAccountOwnedProfileEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountOwnedProfileEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadProfileImageResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10201     *UploadProfileImageRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UploadProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountOwnedNotificationSettingsResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *AccountOwnedProfileRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateAccountOwnedNotificationSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountOwnedNotificationSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCocktailsListResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *CocktailsListRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetCocktailsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCocktailsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeedCocktailsResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SeedCocktailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeedCocktailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeedIngredientsResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SeedIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeedIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCocktailIngredientFiltersResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *CocktailIngredientFiltersRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetCocktailIngredientFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCocktailIngredientFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCocktailResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *CocktailRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetCocktailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCocktailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrivacyPolicyResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *LegalDocumentRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetPrivacyPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrivacyPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTermsOfServiceResponse struct {
	Body                                []byte
	HTTPResponse                        *http.Response
	ApplicationjsonXApiVersion10200     *LegalDocumentRs
	ApplicationjsonXApiVersion10Default *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetTermsOfServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTermsOfServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountOwnedProfileWithResponse request returning *GetAccountOwnedProfileResponse
func (c *ClientWithResponses) GetAccountOwnedProfileWithResponse(ctx context.Context, params *GetAccountOwnedProfileParams, reqEditors ...RequestEditorFn) (*GetAccountOwnedProfileResponse, error) {
	rsp, err := c.GetAccountOwnedProfile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountOwnedProfileResponse(rsp)
}

// LoginAccountOwnedProfileWithResponse request returning *LoginAccountOwnedProfileResponse
func (c *ClientWithResponses) LoginAccountOwnedProfileWithResponse(ctx context.Context, params *LoginAccountOwnedProfileParams, reqEditors ...RequestEditorFn) (*LoginAccountOwnedProfileResponse, error) {
	rsp, err := c.LoginAccountOwnedProfile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginAccountOwnedProfileResponse(rsp)
}

// UpdateAccountOwnedProfileWithBodyWithResponse request with arbitrary body returning *UpdateAccountOwnedProfileResponse
func (c *ClientWithResponses) UpdateAccountOwnedProfileWithBodyWithResponse(ctx context.Context, params *UpdateAccountOwnedProfileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedProfileResponse, error) {
	rsp, err := c.UpdateAccountOwnedProfileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountOwnedProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountOwnedProfileWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *UpdateAccountOwnedProfileParams, body UpdateAccountOwnedProfileApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedProfileResponse, error) {
	rsp, err := c.UpdateAccountOwnedProfileWithApplicationJSONXAPIVersion10Body(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountOwnedProfileResponse(rsp)
}

// UpdateAccountOwnedAccessibilitySettingsWithBodyWithResponse request with arbitrary body returning *UpdateAccountOwnedAccessibilitySettingsResponse
func (c *ClientWithResponses) UpdateAccountOwnedAccessibilitySettingsWithBodyWithResponse(ctx context.Context, params *UpdateAccountOwnedAccessibilitySettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedAccessibilitySettingsResponse, error) {
	rsp, err := c.UpdateAccountOwnedAccessibilitySettingsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountOwnedAccessibilitySettingsResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountOwnedAccessibilitySettingsWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *UpdateAccountOwnedAccessibilitySettingsParams, body UpdateAccountOwnedAccessibilitySettingsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedAccessibilitySettingsResponse, error) {
	rsp, err := c.UpdateAccountOwnedAccessibilitySettingsWithApplicationJSONXAPIVersion10Body(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountOwnedAccessibilitySettingsResponse(rsp)
}

// ManageFavoriteCocktailsWithBodyWithResponse request with arbitrary body returning *ManageFavoriteCocktailsResponse
func (c *ClientWithResponses) ManageFavoriteCocktailsWithBodyWithResponse(ctx context.Context, params *ManageFavoriteCocktailsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManageFavoriteCocktailsResponse, error) {
	rsp, err := c.ManageFavoriteCocktailsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManageFavoriteCocktailsResponse(rsp)
}

func (c *ClientWithResponses) ManageFavoriteCocktailsWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *ManageFavoriteCocktailsParams, body ManageFavoriteCocktailsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*ManageFavoriteCocktailsResponse, error) {
	rsp, err := c.ManageFavoriteCocktailsWithApplicationJSONXAPIVersion10Body(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManageFavoriteCocktailsResponse(rsp)
}

// GetCocktailRatingsWithResponse request returning *GetCocktailRatingsResponse
func (c *ClientWithResponses) GetCocktailRatingsWithResponse(ctx context.Context, params *GetCocktailRatingsParams, reqEditors ...RequestEditorFn) (*GetCocktailRatingsResponse, error) {
	rsp, err := c.GetCocktailRatings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCocktailRatingsResponse(rsp)
}

// RateCocktailWithBodyWithResponse request with arbitrary body returning *RateCocktailResponse
func (c *ClientWithResponses) RateCocktailWithBodyWithResponse(ctx context.Context, params *RateCocktailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RateCocktailResponse, error) {
	rsp, err := c.RateCocktailWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRateCocktailResponse(rsp)
}

func (c *ClientWithResponses) RateCocktailWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *RateCocktailParams, body RateCocktailApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*RateCocktailResponse, error) {
	rsp, err := c.RateCocktailWithApplicationJSONXAPIVersion10Body(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRateCocktailResponse(rsp)
}

// SendCocktailRecommendationWithBodyWithResponse request with arbitrary body returning *SendCocktailRecommendationResponse
func (c *ClientWithResponses) SendCocktailRecommendationWithBodyWithResponse(ctx context.Context, params *SendCocktailRecommendationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCocktailRecommendationResponse, error) {
	rsp, err := c.SendCocktailRecommendationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCocktailRecommendationResponse(rsp)
}

func (c *ClientWithResponses) SendCocktailRecommendationWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *SendCocktailRecommendationParams, body SendCocktailRecommendationApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*SendCocktailRecommendationResponse, error) {
	rsp, err := c.SendCocktailRecommendationWithApplicationJSONXAPIVersion10Body(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCocktailRecommendationResponse(rsp)
}

// UpdateAccountOwnedProfileEmailWithBodyWithResponse request with arbitrary body returning *UpdateAccountOwnedProfileEmailResponse
func (c *ClientWithResponses) UpdateAccountOwnedProfileEmailWithBodyWithResponse(ctx context.Context, params *UpdateAccountOwnedProfileEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedProfileEmailResponse, error) {
	rsp, err := c.UpdateAccountOwnedProfileEmailWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountOwnedProfileEmailResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountOwnedProfileEmailWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *UpdateAccountOwnedProfileEmailParams, body UpdateAccountOwnedProfileEmailApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedProfileEmailResponse, error) {
	rsp, err := c.UpdateAccountOwnedProfileEmailWithApplicationJSONXAPIVersion10Body(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountOwnedProfileEmailResponse(rsp)
}

// UploadProfileImageWithBodyWithResponse request with arbitrary body returning *UploadProfileImageResponse
func (c *ClientWithResponses) UploadProfileImageWithBodyWithResponse(ctx context.Context, params *UploadProfileImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadProfileImageResponse, error) {
	rsp, err := c.UploadProfileImageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadProfileImageResponse(rsp)
}

// UpdateAccountOwnedNotificationSettingsWithBodyWithResponse request with arbitrary body returning *UpdateAccountOwnedNotificationSettingsResponse
func (c *ClientWithResponses) UpdateAccountOwnedNotificationSettingsWithBodyWithResponse(ctx context.Context, params *UpdateAccountOwnedNotificationSettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedNotificationSettingsResponse, error) {
	rsp, err := c.UpdateAccountOwnedNotificationSettingsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountOwnedNotificationSettingsResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountOwnedNotificationSettingsWithApplicationJSONXAPIVersion10BodyWithResponse(ctx context.Context, params *UpdateAccountOwnedNotificationSettingsParams, body UpdateAccountOwnedNotificationSettingsApplicationJSONXAPIVersion10RequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountOwnedNotificationSettingsResponse, error) {
	rsp, err := c.UpdateAccountOwnedNotificationSettingsWithApplicationJSONXAPIVersion10Body(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountOwnedNotificationSettingsResponse(rsp)
}

// GetCocktailsListWithResponse request returning *GetCocktailsListResponse
func (c *ClientWithResponses) GetCocktailsListWithResponse(ctx context.Context, params *GetCocktailsListParams, reqEditors ...RequestEditorFn) (*GetCocktailsListResponse, error) {
	rsp, err := c.GetCocktailsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCocktailsListResponse(rsp)
}

// SeedCocktailsWithResponse request returning *SeedCocktailsResponse
func (c *ClientWithResponses) SeedCocktailsWithResponse(ctx context.Context, params *SeedCocktailsParams, reqEditors ...RequestEditorFn) (*SeedCocktailsResponse, error) {
	rsp, err := c.SeedCocktails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeedCocktailsResponse(rsp)
}

// SeedIngredientsWithResponse request returning *SeedIngredientsResponse
func (c *ClientWithResponses) SeedIngredientsWithResponse(ctx context.Context, params *SeedIngredientsParams, reqEditors ...RequestEditorFn) (*SeedIngredientsResponse, error) {
	rsp, err := c.SeedIngredients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeedIngredientsResponse(rsp)
}

// GetCocktailIngredientFiltersWithResponse request returning *GetCocktailIngredientFiltersResponse
func (c *ClientWithResponses) GetCocktailIngredientFiltersWithResponse(ctx context.Context, params *GetCocktailIngredientFiltersParams, reqEditors ...RequestEditorFn) (*GetCocktailIngredientFiltersResponse, error) {
	rsp, err := c.GetCocktailIngredientFilters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCocktailIngredientFiltersResponse(rsp)
}

// GetCocktailWithResponse request returning *GetCocktailResponse
func (c *ClientWithResponses) GetCocktailWithResponse(ctx context.Context, id string, params *GetCocktailParams, reqEditors ...RequestEditorFn) (*GetCocktailResponse, error) {
	rsp, err := c.GetCocktail(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCocktailResponse(rsp)
}

// GetPrivacyPolicyWithResponse request returning *GetPrivacyPolicyResponse
func (c *ClientWithResponses) GetPrivacyPolicyWithResponse(ctx context.Context, params *GetPrivacyPolicyParams, reqEditors ...RequestEditorFn) (*GetPrivacyPolicyResponse, error) {
	rsp, err := c.GetPrivacyPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrivacyPolicyResponse(rsp)
}

// GetTermsOfServiceWithResponse request returning *GetTermsOfServiceResponse
func (c *ClientWithResponses) GetTermsOfServiceWithResponse(ctx context.Context, params *GetTermsOfServiceParams, reqEditors ...RequestEditorFn) (*GetTermsOfServiceResponse, error) {
	rsp, err := c.GetTermsOfService(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTermsOfServiceResponse(rsp)
}

// ParseGetAccountOwnedProfileResponse parses an HTTP response from a GetAccountOwnedProfileWithResponse call
func ParseGetAccountOwnedProfileResponse(rsp *http.Response) (*GetAccountOwnedProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountOwnedProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountOwnedProfileRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseLoginAccountOwnedProfileResponse parses an HTTP response from a LoginAccountOwnedProfileWithResponse call
func ParseLoginAccountOwnedProfileResponse(rsp *http.Response) (*LoginAccountOwnedProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginAccountOwnedProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountOwnedProfileRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountOwnedProfileRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseUpdateAccountOwnedProfileResponse parses an HTTP response from a UpdateAccountOwnedProfileWithResponse call
func ParseUpdateAccountOwnedProfileResponse(rsp *http.Response) (*UpdateAccountOwnedProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountOwnedProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountOwnedProfileRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseUpdateAccountOwnedAccessibilitySettingsResponse parses an HTTP response from a UpdateAccountOwnedAccessibilitySettingsWithResponse call
func ParseUpdateAccountOwnedAccessibilitySettingsResponse(rsp *http.Response) (*UpdateAccountOwnedAccessibilitySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountOwnedAccessibilitySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountOwnedProfileRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseManageFavoriteCocktailsResponse parses an HTTP response from a ManageFavoriteCocktailsWithResponse call
func ParseManageFavoriteCocktailsResponse(rsp *http.Response) (*ManageFavoriteCocktailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManageFavoriteCocktailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountOwnedProfileRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseGetCocktailRatingsResponse parses an HTTP response from a GetCocktailRatingsWithResponse call
func ParseGetCocktailRatingsResponse(rsp *http.Response) (*GetCocktailRatingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCocktailRatingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountCocktailRatingsRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseRateCocktailResponse parses an HTTP response from a RateCocktailWithResponse call
func ParseRateCocktailResponse(rsp *http.Response) (*RateCocktailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RateCocktailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RateCocktailRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseSendCocktailRecommendationResponse parses an HTTP response from a SendCocktailRecommendationWithResponse call
func ParseSendCocktailRecommendationResponse(rsp *http.Response) (*SendCocktailRecommendationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendCocktailRecommendationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseUpdateAccountOwnedProfileEmailResponse parses an HTTP response from a UpdateAccountOwnedProfileEmailWithResponse call
func ParseUpdateAccountOwnedProfileEmailResponse(rsp *http.Response) (*UpdateAccountOwnedProfileEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountOwnedProfileEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountOwnedProfileRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseUploadProfileImageResponse parses an HTTP response from a UploadProfileImageWithResponse call
func ParseUploadProfileImageResponse(rsp *http.Response) (*UploadProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UploadProfileImageRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseUpdateAccountOwnedNotificationSettingsResponse parses an HTTP response from a UpdateAccountOwnedNotificationSettingsWithResponse call
func ParseUpdateAccountOwnedNotificationSettingsResponse(rsp *http.Response) (*UpdateAccountOwnedNotificationSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountOwnedNotificationSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountOwnedProfileRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseGetCocktailsListResponse parses an HTTP response from a GetCocktailsListWithResponse call
func ParseGetCocktailsListResponse(rsp *http.Response) (*GetCocktailsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCocktailsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CocktailsListRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseSeedCocktailsResponse parses an HTTP response from a SeedCocktailsWithResponse call
func ParseSeedCocktailsResponse(rsp *http.Response) (*SeedCocktailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeedCocktailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseSeedIngredientsResponse parses an HTTP response from a SeedIngredientsWithResponse call
func ParseSeedIngredientsResponse(rsp *http.Response) (*SeedIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeedIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseGetCocktailIngredientFiltersResponse parses an HTTP response from a GetCocktailIngredientFiltersWithResponse call
func ParseGetCocktailIngredientFiltersResponse(rsp *http.Response) (*GetCocktailIngredientFiltersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCocktailIngredientFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CocktailIngredientFiltersRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseGetCocktailResponse parses an HTTP response from a GetCocktailWithResponse call
func ParseGetCocktailResponse(rsp *http.Response) (*GetCocktailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCocktailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CocktailRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseGetPrivacyPolicyResponse parses an HTTP response from a GetPrivacyPolicyWithResponse call
func ParseGetPrivacyPolicyResponse(rsp *http.Response) (*GetPrivacyPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrivacyPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LegalDocumentRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}

// ParseGetTermsOfServiceResponse parses an HTTP response from a GetTermsOfServiceWithResponse call
func ParseGetTermsOfServiceResponse(rsp *http.Response) (*GetTermsOfServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTermsOfServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LegalDocumentRs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationjsonXApiVersion10Default = &dest

	}

	return response, nil
}
